from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from datetime import datetime, timedelta
from .text_processor import TextProcessor
from .db_session import create_session
from project.models.TelegramModel import TelegramChat
import logging
import random
import string
from typing import Dict, Optional
from project.models.users import User


class TelegramBot:
    def __init__(self, token: str):
        self.token = token
        self.processor = TextProcessor()
        self.active_verifications: Dict[int, dict] = {}  # {user_id: {code: str, expires_at: datetime}}
        logging.basicConfig(
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            level=logging.INFO
        )
        self.logger = logging.getLogger(__name__)

    def clean_expired_codes(self):
        """–û—á–∏—â–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–æ–¥—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        now = datetime.now()
        expired_users = [
            user_id for user_id, data in self.active_verifications.items()
            if data["expires_at"] < now
        ]
        for user_id in expired_users:
            del self.active_verifications[user_id]
            self.logger.debug(f"Cleared expired code for user {user_id}")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        chat = update.effective_chat
        user = update.effective_user

        if chat.type == "private":
            await update.message.reply_text(
                "üîê –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram –∫ —Å–∞–π—Ç—É:\n"
                "1. –ù–∞ —Å–∞–π—Ç–µ –Ω–∞–∂–º–∏ '–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram'\n"
                "2. –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –≤–≤–µ–¥–∏ –∑–¥–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /verify –ö–û–î\n\n"
            )
            return

        db = create_session()
        chat_in_db = db.query(TelegramChat).filter_by(chat_id=str(chat.id)).first()

        if chat_in_db:
            await update.message.reply_text(
                f"–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
                f"ID —á–∞—Ç–∞: {chat.id}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if chat_in_db.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
            )
        else:
            await self._register_new_chat(chat, user, update)

    async def verify(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞"""
        if update.message.chat.type != "private":
            return

        self.clean_expired_codes()
        user_id = update.message.from_user.id
        args = context.args

        if not args or len(args[0]) != 6:
            await update.message.reply_text("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü—Ä–∏–º–µ—Ä: /verify A1B2C3")
            return

        code = args[0].upper()
        db = create_session()

        try:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
            user = db.query(User).filter(
                User.telegram_verify_code == code,
                User.telegram_code_expires > datetime.now()
            ).first()

            if user:
                if user.telegram_id and user.telegram_id != user_id:
                    await update.message.reply_text(
                        "‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º Telegram"
                    )
                    return

                user.telegram_id = user_id
                user.is_telegram_verified = True
                user.telegram_verify_code = None
                user.telegram_code_expires = None
                db.commit()

                await update.message.reply_text(
                    "‚úÖ –í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É!\n\n"
                    f"–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {user.email or user.name}"
                )
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥")

        except Exception as e:
            db.rollback()
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            await update.message.reply_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

        finally:
            db.close()

    async def get_verification_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –õ–°)"""
        if update.message.chat.type != "private":
            return

        self.clean_expired_codes()  # –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–æ–¥—ã

        user_id = update.message.from_user.id

        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥
        if user_id in self.active_verifications:
            code_data = self.active_verifications[user_id]
            await update.message.reply_text(
                f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥: {code_data['code']}\n"
                f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {code_data['expires_at'].strftime('%H:%M:%S')}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞."
            )
            return

        code = self.generate_verification_code()
        expires_at = datetime.now() + timedelta(minutes=3)

        self.active_verifications[user_id] = {
            "code": code,
            "expires_at": expires_at
        }

        self.logger.info(f"Generated verification code {code} for user {user_id}")

        await update.message.reply_text(
            f"üîë –í–∞—à –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {code}\n"
            f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_at.strftime('%H:%M:%S')}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞."
        )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_id = str(update.effective_chat.id)
        db = create_session()

        chat = db.query(TelegramChat).filter_by(chat_id=chat_id).first()
        if not chat or not chat.is_active:
            return

        try:
            new_entry = self.processor.process_text(
                text=update.message.text,
                source="telegram",
                chat_id=chat_id,
                author=str(update.message.from_user.id))
            db.add(new_entry)
            db.commit()
        except Exception as e:
            db.rollback()
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def get_chat_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞"""
        chat = update.effective_chat
        await update.message.reply_text(
            f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat.id}\n"
            f"–¢–∏–ø —á–∞—Ç–∞: {'–≥—Ä—É–ø–ø–∞' if chat.type in ['group', 'supergroup'] else '–ª–∏—á–Ω—ã–π'}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {getattr(chat, 'title', '–Ω–µ—Ç')}"
        )

    async def _register_new_chat(self, chat, user, update):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –≤ –ë–î"""
        db = create_session()

        try:
            if chat.type == "private":
                title_parts = []
                if user.first_name:
                    title_parts.append(user.first_name)
                if user.last_name:
                    title_parts.append(user.last_name)
                title = ' '.join(title_parts) if title_parts else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat.id}"

                if hasattr(user, 'username') and user.username:
                    title += f" (@{user.username})"
            else:
                title = chat.title if hasattr(chat, 'title') and chat.title else f'–ß–∞—Ç {chat.id}'

            new_chat = TelegramChat(
                chat_id=str(chat.id),
                title=title,
                user_id=user.id,
                is_active=False,
                chat_type=chat.type,
                created_at=datetime.now()
            )

            db.add(new_chat)
            db.commit()

            response = (
                f"üéâ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
                f"ID: {chat.id}\n"
                f"–¢–∏–ø: {'–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' if chat.type == 'private' else '–ì—Ä—É–ø–ø–∞/–ö–∞–Ω–∞–ª'}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n\n"
                f"–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
            )

        except Exception as e:
            db.rollback()
            response = f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞: {str(e)}"
            self.logger.error(f"Chat registration error: {str(e)}", exc_info=True)

        await update.message.reply_text(response)

    async def on_chat_join(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç"""
        chat = update.effective_chat
        user = update.effective_user
        db = create_session()

        if not db.query(TelegramChat).filter_by(chat_id=str(chat.id)).first():
            title = chat.title if chat.type in ['group', 'supergroup', 'channel'] else user.full_name

            new_chat = TelegramChat(
                chat_id=str(chat.id),
                title=title,
                user_id=str(user.id),
                is_active=False,
                chat_type=chat.type,
                created_at=datetime.now()
            )

            db.add(new_chat)
            db.commit()

            response_msg = (
                f"–ß–∞—Ç {'–≥—Ä—É–ø–ø—ã' if chat.type != 'private' else '–õ–°'} "
                f"–¥–æ–±–∞–≤–ª–µ–Ω: {title}\n"
                f"–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
            )

            await update.message.reply_text(response_msg)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        app = Application.builder().token(self.token).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        handlers = [
            CommandHandler("start", self.start),
            CommandHandler("chat_id", self.get_chat_id),
            CommandHandler("verify", self.verify),
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message),
            MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, self.on_chat_join)
        ]

        for handler in handlers:
            app.add_handler(handler)

        self.logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        app.run_polling()